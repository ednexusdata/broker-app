@using static EdNexusData.Broker.Web.Constants.Claims.CustomClaimType;
@using EdNexusData.Broker.Domain.Extensions;
@using EdNexusData.Broker.Web.ViewModels.Preparing;
@model RequestManifestListViewModel;
@{
    // Copyright: 2023 Education Nexus Oregon
    // Author: Makoa Jacobsen, makoa@makoajacobsen.com
    ViewData["Title"] = "Prepare Records";
    Layout = "_AuthenticatedLayout";
    ViewData["FocusBar"] = true;
}
<form method="post" asp-action="Update" asp-route-id="@Model.RequestId" autocomplete="off">
    <div class="flow-root overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg" x-data="{ }">
        <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                <table class="min-w-full divide-y divide-gray-300">
                    <thead class="bg-white">
                        <tr>
                            <th scope="col" class="py-3.5 text-left text-sm font-semibold text-gray-900 sm:pl-3">&nbsp;
                            </th>
                            <th scope="col"
                                class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-3">Received
                                Date</th>
                            <th scope="col"
                                class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-3">File Name
                            </th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Type</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Received</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Mapped</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Ignored</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Remaining</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Action</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                            <th scope="col">&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white">
                        @{
                            var even = true; var counter = 0;
                        }
                        @foreach (var file in Model.PayloadContents)
                        {
                            <tr class="@(even ? "bg-gray-50": "")">
                                <td class="whitespace-nowrap py-2 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-3">
                                    @if (file.Action is null || file.Action.Process == false)
                                    {
                                        <svg class="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                            stroke="currentColor" aria-hidden="true">
                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                d="M9 9.75L15 15M9 15L15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                            stroke="currentColor" aria-hidden="true">
                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    }
                                </td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.ReceivedDateDisplay</td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.FileName
                                    <div class="flex flex-row">
                                        <!--<div class="mr-2 text-xs text-gray-500">View</div>-->
                                        <div class="mr-2 text-xs text-gray-500"><a asp-controller="Requests" asp-action="ViewAttachment" asp-route-id="@file.PayloadContentId" target="_blank">Raw</a></div>
                                        <div class="mx-2 text-xs text-gray-500"><a asp-controller="Requests" asp-action="ViewAttachment" asp-route-id="@file.PayloadContentId" asp-route-attachmentContentDisposition="true" target="_blank">Download</a></div>
                                    </div>
                                </td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.ContentCategory <div
                                        class="text-xs text-gray-500">@file.ContentType</div>
                                </td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.ReceviedCount</td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.MappedCount</td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.IgnoredCount</td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">@file.RemainingCount</td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">
                                    <input type="hidden" name="PayloadContent.Items[@counter].PayloadContentId"
                                        value="@file.PayloadContentId">
                                    <input type="hidden" name="PayloadContent.Items[@counter].OriginalAction"
                                        value="@file.Action?.PayloadContentActionType">
                                    <select name="PayloadContent.Items[@counter].Action"
                                        asp-for="@file.PayloadContentActionType"
                                        asp-items="@Model.PayloadContentActions"
                                        id="PayloadContent_Items_[@counter]_Action"
                                        class="rounded-md border-0 py-1.5 px-5.5 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                                    </select>
                                </td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600"> <span
                                            :class="{
                                                'text-neutral-700 bg-neutral-50 ring-neutral-600/20': @Html.Raw(Json.Serialize(@file.Action?.PayloadContentActionStatus.ToString() == "Ready")),
                                                'text-caution-700 bg-caution-50 ring-caution-600/20': @Html.Raw(Json.Serialize(@file.Action?.PayloadContentActionStatus.ToString() == "Prepared")),
                                                'text-promote-700 bg-promote-50 ring-promote-600/20': @Html.Raw(Json.Serialize(@file.Action?.PayloadContentActionStatus.ToString() == "Imported")),
                                            }"
                                            class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset"
                                        >
                                            @file.Action?.PayloadContentActionStatus.ToString()
                                        </span></td>
                                <td class="whitespace-nowrap px-3 py-2 text-sm text-gray-600">
                                    <div class="flex justify-end gap-2">

                                        @if (file.ContentCategory == "Data" && file.Action is not null && file.Action.Process == true)
                                        {
                                            <a asp-controller="Mapping" asp-action="Index" asp-route-id="@file.Action.Id"
                                                asp-authorize asp-policy="@TransferIncomingRecords"
                                                class="m-2 text-tertiary-700 hover:text-tertiary-900">Map</a>
                                        }
                                    </div>
                                </td>
                            </tr>
                            counter++;
                            even = !even;
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="flex items-center justify-end gap-x-6 border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
            <a asp-controller="Incoming" asp-action="Index" asp-authorize
                asp-policy="@TransferIncomingRecords"
                class="relative inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline-offset-0">
                Cancel
            </a>
            <input name="PayloadContent.RequestId" asp-for="RequestId" type="hidden" />
            <button type="submit"
                class="relative inline-flex items-center rounded-md bg-tertiary-700 px-3 py-2 text-center text-sm font-semibold ring-1 ring-inset ring-tertiary-800 text-white shadow-sm hover:bg-tertiary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-tertiary-700 focus:z-10">Save</button>
        </div>
    </div>
</form>
@section HeaderAction
{
  <div class="flex space-x-4">
  @if(ViewBag.JobId is not null && ViewBag.JobId.ToString() != "")
    {
    <div x-data="preparingIndex">
      <span x-text="status">@Model.RequestStatus.GetDescription()</span>
    </div>
    } else
    {
        <div>@Model.RequestStatus.ToString()</div>
    }
  @if (Model.RequestStatus == EdNexusData.Broker.Common.Jobs.RequestStatus.InProgress)
  {
    <div>
    <form method="post" asp-action="ImportRequest" asp-route-id="@Model.RequestId" autocomplete="off">
      <input type="hidden" name="_METHOD" value="PUT" />
      <button
        type="submit"
        class="relative inline-flex items-center rounded-md bg-tertiary-700 px-3 py-2 text-center text-sm font-semibold ring-1 ring-inset ring-tertiary-800 text-white shadow-sm hover:bg-tertiary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-tertiary-700 focus:z-10"
      >Import</button>
    </form>
    </div>
  } 
  </div>
}


@section scripts
{
<script>
  document.addEventListener('alpine:init', () => {

    Alpine.data('preparingIndex', () => ({
      status: "Preparing...",
      interval: null,
      fetchData: null,
      initFetchData: function() {
        this.fetchData = async () => {
          try {
            const response = await fetch('/api/v1/jobs?jobId=@ViewBag.JobId');
            const data = await response.json();
            //console.log(data);
            this.status = data.workerState;
            //console.log("Worker State: " + data.workerState);

            //console.log("Job Status: " + data.jobStatus);
            if (data.jobStatus == 2)
            {
              //console.log("Inside job status");
              location.reload();
              clearInterval(this.interval);
            }

          } catch (error) {
            console.error('Error fetching status:', error);
            clearInterval(this.interval);
          }
        };
      },
      init() {
        this.initFetchData();
        //console.log("Called startPolling and about to call setInterval");
        this.interval = setInterval(this.fetchData, 2000); // Poll every 2 seconds (adjust as needed)
        //this.status = "Called setInternal";
        //console.log("Called setInterval");
        
      },
      destroy() {
          // Detach the handler, avoiding memory and side-effect leakage
          clearInterval(this.interval);
      },
    }))
    
  });
</script>
}