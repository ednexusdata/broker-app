@model EdNexusData.Broker.Web.ViewModels.Requests.RequestViewModel
@using EdNexusData.Broker.Core.Extensions
@using static EdNexusData.Broker.Web.Constants.Claims.CustomClaimType;
@inject EdNexusData.Broker.Web.Helpers.TimezoneHelper TimezoneHelper;
@using System.Text.Json;
@{
    // Copyright: 2023 Education Nexus Oregon
    // Author: Makoa Jacobsen, makoa@makoajacobsen.com
    ViewData["Title"] = "Request Detail";
    Layout = "_AuthenticatedLayout";
    ViewData["FocusBar"] = true;
    ViewData["FocusBarReadOnly"] = true;

    // Tailwind CSS classes defined in comments so that the processor loads the combinations
    var incomingBgColor = "gray"; // border-gray-400 bg-gray-500 bg-gray-700
    var outgoingBgColor = "tertiary"; // border-tertiary-400 bg-tertiary-400 bg-tertiary-700
    if (Model.Request?.IncomingOutgoing == EdNexusData.Broker.Core.IncomingOutgoing.Incoming)
    {
        incomingBgColor = "tertiary";
        outgoingBgColor = "gray";
    }
}
<div class="space-y-10 divide-y divide-gray-900/10">
    <div class="px-4 sm:px-0">
        <div class="bg-white shadow-sm ring-1 ring-gray-900/5 sm:rounded-xl px-4 py-6">
            <h1 class="font-bold text-xl mb-3">@Model.Request?.Student?.Student?.FirstName @Model.Request?.Student?.Student?.MiddleName @Model.Request?.Student?.Student?.LastName</h1>
            <div class="font-semibold mb-3">Student ID: @Model.Request?.Student?.Student?.StudentNumber | DOB: @Model.Request?.Student?.Student?.Birthdate | Grade: @Model.Request?.Student?.Student?.Grade | Gender: @Model.Request?.Student?.Student?.Gender</div>
            <div class="grid grid-cols-5 bg-@incomingBgColor-700 p-1">
                <div class="border-4 border-@incomingBgColor-400 bg-@incomingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="uppercase text-sm font-bold">⮕ Incoming</div>
                    <div>@Model.Request?.RequestManifest?.From?.District?.ShortName / @Model.Request?.RequestManifest?.From?.District?.Number</div>
                    <div>@Model.Request?.RequestManifest?.From?.School?.ShortName / @Model.Request?.RequestManifest?.From?.School?.Number</div>
                </div>
                <div class="border-4 border-@incomingBgColor-400 bg-@incomingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">Requested</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Requested)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Requested)?.Userstamp</div>
                </div>
                <div class="border-4 border-@incomingBgColor-400 bg-@incomingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">Transmitted</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Transmitted)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Transmitted)?.Userstamp</div>
                </div>
                <div class="border-4 border-@incomingBgColor-400 bg-@incomingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">In-Progress</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.InProgress)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.InProgress)?.Userstamp</div>
                </div>
                <div class="border-4 border-@incomingBgColor-400 bg-@incomingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">Finished</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Finished)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Finished)?.Userstamp</div>
                </div>
            </div>
            <div class="grid grid-cols-5 bg-@outgoingBgColor-700 p-1">
                <div class="border-4 border-@outgoingBgColor-400 bg-@outgoingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="uppercase text-sm font-bold">Outgoing ⮕</div>
                    <div>@Model.Request?.RequestManifest?.To?.District?.ShortName / @Model.Request?.RequestManifest?.To?.District?.Number</div>
                    <div>@Model.Request?.RequestManifest?.To?.School?.ShortName / @Model.Request?.RequestManifest?.To?.School?.Number</div>
                </div>
                <div class="border-4 border-@outgoingBgColor-400 bg-@outgoingBgColor-500 p-1.5 m-0.5 rounded">&nbsp;</div>
                <div class="border-4 border-@outgoingBgColor-400 bg-@outgoingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">Received</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Received)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Received)?.Userstamp</div>
                </div>
                <div class="border-4 border-@outgoingBgColor-400 bg-@outgoingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">Loaded</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Loaded)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Loaded)?.Userstamp</div>
                </div>
                <div class="border-4 border-@outgoingBgColor-400 bg-@outgoingBgColor-500 p-1.5 m-0.5 rounded">
                    <div class="bg-gray-200 font-bold text-sm text-center rounded-md p-0.5 mb-1">Transmitted</div>
                    <div class="text-sm text-center">@Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Transmitted)?.Timestamp</div>
                    <div class="text-sm text-center">by @Model.StatusGrid.GetValueOrDefault(EdNexusData.Broker.Common.Jobs.RequestStatus.Transmitted)?.Userstamp</div>
                </div>
            </div>
        
        @if (Model.Request?.Messages != null && Model.Request.Messages.Count > 0)
                {
                    @foreach (var message in Model.Request.Messages)
                    {
                        @if (message.RequestResponse == EdNexusData.Broker.Core.RequestResponse.Response)
                        {
                            <div class="mt-4">
                            <div class="flex flex-col w-full max-w-[60%] leading-1.5 p-4 border-gray-200 bg-gray-300 rounded-b-2xl rounded-tr-2xl">
                                <div class="flex items-center space-x-2">
                                    <span class="text-sm font-semibold text-gray-900">@message.Sender?.Name</span>
                                    <span class="text-sm font-normal text-gray-500">@TimezoneHelper.DisplayTimeFromUtc(message.SenderSentTimestamp)</span>
                                </div>
                                @message.MessageContents?.MessageText
                                <span class="flex text-sm font-normal text-gray-500 gap-2">
                                    @message.RequestStatus?.GetDescription()
                                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" class="self-center" width="3" height="4" viewBox="0 0 3 4" fill="none">
                                        <circle cx="1.5" cy="2" r="1.5" fill="#6B7280"/>
                                    </svg>
                                    <a asp-action="ViewMessage" asp-route-id="@message.Id" target="_blank">Contents</a>
                                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" class="self-center" width="3" height="4" viewBox="0 0 3 4" fill="none">
                                        <circle cx="1.5" cy="2" r="1.5" fill="#6B7280"/>
                                    </svg>
                                    <a asp-action="ViewTransmission" asp-route-id="@message.Id" target="_blank">Transmission</a></span>
                            </div>
                            </div>
                        }
                        else
                        {
                            <div class="mt-4">
                            <div class="flex flex-row w-full">
                                <div class="w-full h-full max-w-[40%]">&nbsp;</div>
                                <div class="w-full leading-1.5 p-4 border-tertiary-200 bg-tertiary-500 rounded-b-2xl rounded-tl-2xl mt-2">
                                    <div class="flex items-center space-x-2 rtl:space-x-reverse">
                                        <span class="text-sm font-semibold text-black dark:text-white">@message.Sender?.Name</span>
                                        <span class="text-sm font-normal dark:text-white">@TimezoneHelper.DisplayTimeFromUtc(message.SenderSentTimestamp)</span>
                                    </div>
                                    <div>
                                        @message.MessageContents?.MessageText
                                    </div>
                                    <span class="flex text-sm font-normal dark:text-white gap-2">
                                        @message.RequestStatus?.GetDescription()
                                        <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" class="self-center" width="3" height="4" viewBox="0 0 3 4" fill="none">
                                            <circle cx="1.5" cy="2" r="1.5" fill="#6B7280"/>
                                        </svg>
                                        <a asp-action="ViewMessage" asp-route-id="@message.Id" target="_blank">Contents</a>
                                        <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" class="self-center" width="3" height="4" viewBox="0 0 3 4" fill="none">
                                            <circle cx="1.5" cy="2" r="1.5" fill="#6B7280"/>
                                        </svg>
                                        <a asp-action="ViewTransmission" asp-route-id="@message.Id" target="_blank">Transmission</a></span>
                                </div>
                            </div>
                            </div>
                        }
                    }
                }
        </div>
    </div>
</div>

@section HeaderAction
{
    @if (ViewBag.JobId is not null && ViewBag.JobId.ToString() != "")
    {
                <div x-data="preparingIndex">
            <span x-text="status"></span>
        </div>
    }
    else
    {
                <div>@Model.Request?.RequestStatus</div>
    }
}

@section scripts
{
        <script>
            document.addEventListener('alpine:init', () => {

                Alpine.data('preparingIndex', () => ({
                    status: "Sending...",
                    interval: null,
                    fetchData: null,
                    initFetchData: function () {
                        this.fetchData = async () => {
                            try {
                                const response = await fetch('/api/v1/jobs?jobId=@ViewBag.JobId');
                                const data = await response.json();
                                //console.log(data);
                                this.status = data.workerState;
                                //console.log("Worker State: " + data.workerState);

                                //console.log("Job Status: " + data.jobStatus);
                                if (data.jobStatus == 2) {
                                    //console.log("Inside job status");
                                    location.reload();
                                    clearInterval(this.interval);
                                }

                            } catch (error) {
                                console.error('Error fetching status:', error);
                                clearInterval(this.interval);
                            }
                        };
                    },
                    init() {
                        this.initFetchData();
                        //console.log("Called startPolling and about to call setInterval");
                        this.interval = setInterval(this.fetchData, 2000); // Poll every 2 seconds (adjust as needed)
                        //this.status = "Called setInternal";
                        //console.log("Called setInterval");

                    },
                    destroy() {
                        // Detach the handler, avoiding memory and side-effect leakage
                        clearInterval(this.interval);
                    },
                }))

            });
        </script>
}