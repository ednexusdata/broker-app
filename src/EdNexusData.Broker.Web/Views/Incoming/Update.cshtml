@model EdNexusData.Broker.Web.ViewModels.IncomingRequests.CreateIncomingRequestViewModel
@using EdNexusData.Broker.Domain.Extensions
@{
    // Copyright: 2023 Education Nexus Oregon
    // Author: Makoa Jacobsen, makoa@makoajacobsen.com
    ViewData["Title"] = "Incoming Record Request Details";
    Layout = "_AuthenticatedLayout";
    ViewData["FocusBar"] = true;
    ViewData["FocusBarReadOnly"] = true;
}

<form method="post" asp-action="Update" autocomplete="off">
  <input type="hidden" name="_METHOD" value="PUT" />
  <partial name="_form" for="@Model" />
</form>

<partial name="_file" for="@Model" />

@section HeaderAction
{
  @if (Model.RequestStatus == EdNexusData.Broker.Core.Jobs.RequestStatus.Draft)
  {
    <form method="post" asp-action="Send" asp-route-id="@Model.RequestId" autocomplete="off">
      <input type="hidden" name="_METHOD" value="PUT" />
      <button
        type="submit"
        class="relative inline-flex items-center rounded-md bg-tertiary-700 px-3 py-2 text-center text-sm font-semibold ring-1 ring-inset ring-tertiary-800 text-white shadow-sm hover:bg-tertiary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-tertiary-700 focus:z-10"
      >Send Request</button>
    </form>
  } else {
    @if(ViewBag.JobId is not null && ViewBag.JobId.ToString() != "")
    {
    <div x-data="preparingIndex">
      <span x-text="status">@Model.RequestStatus.GetDescription()</span>
    </div>
    } 
  }
}

@section scripts
{
<script>
  document.addEventListener('alpine:init', () => {

    Alpine.data('preparingIndex', () => ({
      status: "Preparing...",
      interval: null,
      fetchData: null,
      initFetchData: function() {
        this.fetchData = async () => {
          try {
            const response = await fetch('/api/v1/jobs?jobId=@ViewBag.JobId');
            const data = await response.json();
            //console.log(data);
            this.status = data.workerState;
            //console.log("Worker State: " + data.workerState);

            //console.log("Job Status: " + data.jobStatus);
            if (data.jobStatus == 2)
            {
              //console.log("Inside job status");
              location.reload();
              clearInterval(this.interval);
            }

          } catch (error) {
            console.error('Error fetching status:', error);
            clearInterval(this.interval);
          }
        };
      },
      init() {
        this.initFetchData();
        //console.log("Called startPolling and about to call setInterval");
        this.interval = setInterval(this.fetchData, 2000); // Poll every 2 seconds (adjust as needed)
        //this.status = "Called setInternal";
        //console.log("Called setInterval");
        
      },
      destroy() {
          // Detach the handler, avoiding memory and side-effect leakage
          clearInterval(this.interval);
      },
    }))
    
  });
</script>
}