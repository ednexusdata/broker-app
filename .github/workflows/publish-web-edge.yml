name: Publish EdNexusData.Broker.Web Edge Release

on:
  schedule:
    - cron: '0 7 * * *' # Runs at midnight PDT daily
  workflow_dispatch: # Allows manual triggering

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      last_commit: ${{ steps.check_latest.outputs.last_commit }}
      has_changes: ${{ steps.check_previous.outputs.has_changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Commit Hash
        id: check_latest
        run: |
          echo "last_commit=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
          echo "last_commit=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Retrieve Last Edge Build Tags
        id: check_previous
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NIGHTLY_TAGS=$(gh release list | awk '/edge-/{print $1}' | sort -r | head -n 3)
          echo "$EDGE_TAGS" > edge_tags.txt
          echo "Edge Tags: $EDGE_TAGS"

          LAST_COMMIT_STORED=$(echo "$EDGE_TAGS" | head -n 1 | cut -d '-' -f2)
          CURRENT_COMMIT=$(git rev-parse HEAD)

          echo "Last Commit Stored: $LAST_COMMIT_STORED"
          echo "Current Commit: $CURRENT_COMMIT"

          if [[ "$LAST_COMMIT_STORED" != "$CURRENT_COMMIT" ]]; then
            echo "has_changes=true" >> "$GITHUB_ENV"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_ENV"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Log Variables
        run: |
          echo "Last Commit: ${{ steps.check_latest.outputs.last_commit }}"
          echo "Has Changes: ${{ steps.check_previous.outputs.has_changes }}"

  debug-has-changes:
    runs-on: ubuntu-latest
    needs: check-for-changes
    steps:
      - name: Debug Output
        run: |
          echo "Has Changes: ${{ needs.check-for-changes.outputs.has_changes }}"

  delete-old-ghcr-images:
    needs: check-for-changes
    if: ${{ needs.check-for-changes.outputs.has_changes == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Delete Older GHCR Nightly Images (Keeping Last 3)
        run: |
          IMAGE_REPO="ghcr.io/ednexusdata/broker-web"
          NIGHTLY_IMAGES=$(gh api "orgs/ednexusdata/packages/container/broker-web/versions" \
                           --jq '.[].id' | tail -n +4)
          for IMAGE_ID in $EDGE_IMAGES; do
            gh api -X DELETE "orgs/ednexusdata/packages/container/broker-web/versions/$IMAGE_ID"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag-latest:
    needs: check-for-changes
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_latest.outputs.tag_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Commit Hash
        id: get_commit
        run: echo "COMMIT_HASH=$(git rev-parse HEAD)" >> "$GITHUB_ENV"

      - name: Create and Push Latest Tag
        id: tag_latest
        run: |
          TAG_NAME="edge-$(date +'%Y%m%d%H%M%S')"
          git tag $TAG_NAME $COMMIT_HASH
          git push origin $TAG_NAME
          echo "tag_name: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_ENV"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build-and-release:
    needs: [check-for-changes, tag-latest]
    if: ${{ needs.check-for-changes.outputs.has_changes == 'true' && needs.tag-latest.outputs.tag_name != '' }}
    name: Build and Release
    strategy:
      matrix:
        kind: ['linux/amd64','linux/arm64']
        include:
          - kind: linux/amd64
            os: ubuntu-latest
            target: linux-amd64
          - kind: linux/arm64
            os: ubuntu-latest
            target: linux-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout broker-app
        uses: actions/checkout@v4

      - name: Clone broker-common into same level
        run: |
          git clone https://github.com/ednexusdata/broker-common.git /home/runner/work/broker-app/broker-common

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install npm
        run: | 
          cd /home/runner/work/broker-app/broker-app/src/EdNexusData.Broker.Web
          npm install

      - name: Restore dependencies
        run: dotnet restore /home/runner/work/broker-app/broker-app/src/EdNexusData.Broker.Web/EdNexusData.Broker.Web.csproj

      - name: Build
        shell: bash
        run: |
          tag=${{ needs.tag-latest.outputs.tag_name }}
          release_name="EdNexusData.Broker.Web-$tag-${{ matrix.target }}"

          # Build everything
          dotnet publish /home/runner/work/broker-app/broker-app/src/EdNexusData.Broker.Web/EdNexusData.Broker.Web.csproj --framework net8.0 --runtime "${{ matrix.target }}" -c Release -o "$release_name"

          # Pack files
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            # Pack to zip for Windows
            7z a -tzip "${release_name}.zip" "./${release_name}/*"
          else
            tar czvf "${release_name}.tar.gz" "$release_name"
          fi

          # Move output directory to docker context
          mv "$release_name" /home/runner/work/broker-app/broker-app/docker/web

      - name: Create and Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag-latest.outputs.tag_name }}
          name: Edge Build (${{ needs.check-for-changes.outputs.last_commit }})
          files: "EdNexusData.Broker.Web*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  publish-ghcr-images:
    needs: [build-and-release, delete-old-ghcr-images, tag-latest]
    name: Build and publish docker image
    strategy:
      matrix:
        kind: ['linux/amd64','linux/arm64']
        include:
          - kind: linux/amd64
            os: ubuntu-latest
            target: linux-amd64
          - kind: linux/arm64
            os: ubuntu-latest
            target: linux-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: /home/runner/work/broker-app/broker-app/docker/web
          push: true
          tags: ghcr.io/ednexusdata/broker-web:${{ needs.tag-latest.outputs.tag_name }}
          platforms: ${{ matrix.kind }}
          build-args: |
            GITHUB_RELEASE_TAG=${{ needs.tag-latest.outputs.tag_name }}
